import SimpleITK as sitk
import os
from Utils.CommonTools.dir import try_recursive_mkdir
from Utils.CommonTools.connected_components import keep_largest_cc, keep_largest_cc_binary
import path


def main():
    image_dir = f"{path.path_root}/CompetitionData/Image"
    seg_dir = f"{path.path_competition_data}/segmentations"
    save_dir = f"{path.path_root}/CompetitionData/Segmentation"
    try_recursive_mkdir(save_dir)

    count = 0
    for file in os.listdir(seg_dir):
        case_id = file.split('.nii')[0]

        image_nii = sitk.ReadImage(f"{image_dir}/{file}")
        seg_nii = sitk.ReadImage(f"{seg_dir}/{file}")
        seg = sitk.GetArrayFromImage(seg_nii)
        seg = seg[:, ::-1, :]

        # Remove some noise, because the segmentation masks are generated by model(3D Unet)
        largest_cc_binary = keep_largest_cc_binary(seg > 0)
        seg[largest_cc_binary < 1] = 0
        seg = keep_largest_cc(seg)  # For each index, eg. C1, C2, C3 ... C7

        new_seg_nii = sitk.GetImageFromArray(seg)
        new_seg_nii.SetSpacing(image_nii.GetSpacing())
        new_seg_nii.SetOrigin(image_nii.GetOrigin())
        new_seg_nii.SetDirection(image_nii.GetDirection())

        count += 1
        print(f"==> Saving {count}:    {case_id}")
        sitk.WriteImage(new_seg_nii, f"{save_dir}/{case_id}.nii.gz")


if __name__ == '__main__':
    main()
